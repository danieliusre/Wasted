@page "/recipecalc"
@using System.IO
@using Wasted.Data
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RecipeCalcService RecipeCalcService 
@inject RegistrationService RegistrationService

 <style>
    @@import "css/Utils.css";
 </style>

<div class="justify para">
    <h1>RECIPE CALCULATOR</h1>

    <p style="font-size:20px;">Reduce food waste by using leftover products!</p>

    <p style="font-size:20px;">Using this page you will be able to enter (or upload) the produce, and we will provide you with endless recipes, where you can use them!</p>
</div>

<div class="inline"></div>

@code {
    public string Email { get; set; }
    string itemTextField = "";
    string leftTextField = "";
    string unitTextField = "";
    string dateTextField = "";
    string dishFilter = "All";
    bool FindRecipePressed = false;
    private int UserId { get; set; } 
    List<RecipeItemModel> products = new();
    List<String> expiringProducts = new();
    List<String> expiredProducts = new();
    List<DishModel> dishes = new List<DishModel>();
    List<DishModel> dishesShort = new List<DishModel>();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1000);
        UserId = await RegistrationService.GetUserId(Email);
        products = await RecipeCalcService.GetFridgeItems(UserId);
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
        expiredProducts = RecipeCalcService.FindExpiredProducts(products);
    }

    private void AddProduct()
    {
        ValidationService valid = new ValidationService();
        bool emptyFieldsPresent = valid.EmptyFieldsPresent(itemTextField, leftTextField, unitTextField, dateTextField);

        if(emptyFieldsPresent)
        {
            RecipeCalcService.MsgToUser = "Empty fields are present, cannot add product";
            return;
        }
        
        RecipeItemModel newProduct = new RecipeItemModel(){Item = itemTextField.ToLower().Trim(), Amount = Int32.Parse(leftTextField), Unit = unitTextField, Date = dateTextField};
        newProduct.Item = newProduct.Item[0].ToString().ToUpper() + newProduct.Item.Substring(1);

        itemTextField = "";
        leftTextField = "";
        unitTextField = "";
        dateTextField = "";
        
        foreach (var product in products)         //in case of same items being entered twice
        {
            if(newProduct.Item == product.Item)
            {
                RecipeCalcService.ChangeMeasurements(newProduct);
                product.Amount += newProduct.Amount;
                return;
            }
        }

        products.Add(newProduct);
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
        expiredProducts = RecipeCalcService.FindExpiredProducts(products);
    }

    private async Task FindRecipe()
    {
        CanMakeDish makeable = new CanMakeDish(RecipeCalcService.haveEnoughIngredients);
        dishes = await RecipeCalcService.FindRecipe(products, makeable);
        dishesShort = await RecipeCalcService.FindRecipeShort(products);
        FindRecipePressed = true;
    }

    private void GetDishType(string sender)
    {
        dishFilter = sender;
    }

    private void RemoveExpiredProducts()
    {
        products = RecipeCalcService.RemoveExpiredProducts(products);
        expiredProducts.Clear();
    }
}
<AuthorizeView>
    <Authorized>
         @if (true)
         {
             Email = context.User.Identity.Name;
         }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>

<div class="paragraphBlock">
    <h2 style="text-align:center">YOUR PRODUCTS</h2>
    <br>
    <table class="table table-striped" style="text-align:left">
        <thead class="thead-light">
            <tr>
                <th>Item</th>
                <th>Amount</th>
                <th>Measurement</th>
                <th>Best until</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var product in products)
        {
            <tr>
                <td>@product.Item</td>
                <td>@product.Amount</td>
                <td>@product.Unit</td> 
                <td>@product.Date</td> 
            </tr>
        }
        </tbody>
    </table>

    <br>
    <h2 style="text-align:center;font-size:20px;">YOU CAN ADD MORE IN <a href="/fridge/@Email" class="text">'MY FRIDGE'</a></h2>

    @* <div class="input distributeEvenly">
        <span class="inputSpan">
            <input class="inputField" type = "text" size="10"  placeholder = "Product" @bind="@itemTextField" @oninput="(e) => { itemTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        </span>

        <span class="inputSpan">
            <input class="inputField" type = "number" @bind="@leftTextField" placeholder = "Amount" @oninput="(e) => { leftTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        </span>

        <span class="inputSpan">
            <select class="inputField" @bind="@unitTextField" @oninput="(e) => { unitTextField = e.Value ==null? string.Empty:(string)e.Value;}" name="unit" >
                            <option value="g">g</option>
                            <option value="kg">kg</option>
                            <option value="l">l</option>
                            <option value="ml">ml</option>
                            <option value="oz">oz</option>
                            <option value="unit(s)"></option>
            </select>
        </span>

        <span class="inputSpan">
            <input class="inputField" @oninput="(e) => { dateTextField = e.Value ==null? string.Empty:(string)e.Value;}" type="date"  name="bestuntilday" size="1">
        </span>

        <span class="inputSpan">
             <button class="btn btn-primary" @onclick="AddProduct">+</button>
        </span>
    </div>
    <br>
    <div class="text-align: center">
        <button class="learnmore" @onclick="SaveList">Save list</button>
    </div> *@
</div> 
<br>
<div class="container">
    @if(expiredProducts.Any())
    {
        <div class="expired" style="margin-right:3%" >
            <h2><font style="color:red;">Be careful! These products have already expired:</font></h2>
            <font style="color:#3a0647;">
            <ul>
                @foreach (string expiredProduct in expiredProducts)
                {
                    <li style="color:#3a0647;font-size:25px;">@expiredProduct</li>
                }
            </ul>
            <button class="learnmore" @onclick="RemoveExpiredProducts">Remove Expired</button>
            </font>
        </div>
    }
    @if(expiringProducts.Any())
    {
        <div class="expired">
            <h2><font style="color:#3a0647;">These products have 4 or less days left, before they expire:</font></h2>
            <ul>
                @foreach (string expiringProduct in expiringProducts)
                {
                    <li style="color:#3a0647;font-size:25px;">@expiringProduct</li>
                }
            </ul>
        </div>
    }
</div>
<br>
<div class="paragraphBlock">
    @if(!FindRecipePressed)
    {
        <button class="learnmore" @onclick="FindRecipe">Find a recipe!</button>
    }
    @if(dishes.Any())
    {
        <h1><font color=#3a0647>Here's what you can make:</font></h1>
            <div>
                <button class="btn btn-info" @onclick='() => GetDishType("All")'>All</button>
                <button class="btn btn-info" @onclick='() => GetDishType("Baked")'>Baked</button>
                <button class="btn btn-info" @onclick='() => GetDishType("Pasta")'>Pasta</button>
                <button class="btn btn-info" @onclick='() => GetDishType("Salad")'>Salad</button>
                <button class="btn btn-info" @onclick='() => GetDishType("Soup")'>Soup</button> 
            </div>
        <h1><font style="color:#3a0647;font-size:20px">(Showing @dishFilter)</font></h1>
    }

    @if(dishes.Any())
    {
        <dl class="Recipes" >
            @foreach (var dish in dishes) 
            {
                if(dishFilter == "All" || dishFilter == dish.Type)
                {
                    <dt style="color:#3a0647;font-size:30px;">@dish.Name</dt>
                    <dd1>You will need:</dd1>
                    <ul>
                        @foreach (var Ingredient in dish.Ingredients)
                        {
                            <li style="color:#3a0647;font-size:20px;">@Ingredient.Item @Ingredient.Amount @Ingredient.Unit</li>
                        }
                    </ul>
                }
            }
        </dl> 
    }

    @if(dishesShort.Any())
    {
        <dl class="Recipes" >
            <h1><font color=#3a0647>Here's what you can ALMOST make:</font></h1>
            @foreach (var dish in dishesShort) 
            {
                    <dt style="color:#3a0647;font-size:30px;">@dish.Name</dt>
                    <dd1>You will need:</dd1>
                    <ul>
                        @foreach (var Ingredient in dish.Ingredients)
                        {
                            bool productContained = false;
                            @foreach (var product in products)
                            {
                                if(Ingredient.Item == product.Item && Ingredient.Amount <= product.Amount)
                                {
                                    productContained = true;
                                }
                            }
                            if(productContained)
                            {
                                <li style="color:#3a0647;font-size:20px;">@Ingredient.Item @Ingredient.Amount @Ingredient.Unit</li>
                            }
                            else
                            {
                                <li style="color:#FF0000;font-size:20px;">@Ingredient.Item @Ingredient.Amount @Ingredient.Unit</li>
                            }
                        }
                    </ul>
                
            }
        </dl> 
    }
</div>
<br>

@* @if(@RecipeCalcService.MsgToUser != "")

{
    if(@RecipeCalcService.MsgToUser == @RecipeCalcService.ExpiredListTooLong)
    {
        <br><br><br>
        <div class="msgtouser">
            <h2>
                @RecipeCalcService.MsgToUser
                <button class="btn btn-danger" @onclick="RemoveExpiredProducts">Remove</button>
            </h2>
        </div>
    }
    else
    {
        <div class="msgtouser">
            <h2><br>@RecipeCalcService.MsgToUser</h2>
        </div>
    }
} *@
    

