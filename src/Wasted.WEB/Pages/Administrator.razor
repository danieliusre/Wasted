@page "/admin"
@using Wasted.Data
@using System.Collections.Generic
@inject TipsService TipsService
@inject AdminService AdminService
@inject RecipeCalcService RecipeCalcService 
@inject ProductService ProductService
@inject AddRecipeService AddRecipeService
<style>
    @@import "css/Utils.css"
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<AuthorizeView>
    <Authorized>
      <div class="inline"></div>
      
         <div>
            <button class="buttonSub2"  @onclick="RoleChangePressed">Change roles </button>
            <button class="buttonSub2"  @onclick="LoadRemovableList">Remove users </button>
            <button class="buttonSub2"  @onclick="AcceptTipsPressed">Accept tips </button>
            <button class="buttonSub2"  @onclick="AddRecipePressed">Add a recipe </button>
        </div>

  @if(acceptPressed)
  {
    <div class="paragraphBlock">
    <h2 style="text-align:center">REMOVE TIPS</h2>
    @foreach(var tips in allTips)
    {
      if (tips.AdminApproved)
      {
      tipNr = tips.TipId;
      <h2 class = "h2"><br>@tips.TipName
        <i  class="fa fa-thumbs-up">
          @tips.TipLikes
        </i>
        <i  class="fa fa-thumbs-down">
           @tips.TipDislikes
        </i>
        <button class="btn btn-danger" @onclick="() => deleteTip(tips.TipId)"> REMOVE </button>
        @if (!tips.AdminApproved)
        {
        <button class="btn btn-success" @onclick="() => AcceptPressed(tips.TipId)" > APPROVE </button>
        }
      </h2>
      <br> 
        <div class="progress">
          <div class="progress-bar" role="progressbar" aria-valuenow="70"
             aria-valuemin="0" aria-valuemax="100" style="width:@tips.TipLikes%">
           <span class="sr-only">Complete</span>
          </div>
        </div>
      <br>
      <p class = "p">@tips.Name</p> 
      <button class="learnmore" onclick=" window.open('@tips.Link','_blank');">
        I want to learn more
      </button>
      <br>		
    }
    <br>
		<div id = "vertically-aligned-block"class="flex float">
    </div>
  }
  </div>
  <br>
    <div class="paragraphBlock">
    <h2 style="text-align:center">APPROVE TIPS</h2>
    @foreach(var tips in allTips)
    {
      if (!tips.AdminApproved)
      {
      tipNr = tips.TipId;
      <h2 class = "h2"><br>@tips.TipName
        <i  class="fa fa-thumbs-up">
          @tips.TipLikes
        </i>
        <i  class="fa fa-thumbs-down">
           @tips.TipDislikes
        </i>
        <button class="btn btn-success" @onclick="() => AcceptPressed(tips.TipId)" > APPROVE </button>
      </h2>
      <br> 
        <div class="progress">
          <div class="progress-bar" role="progressbar" aria-valuenow="70"
             aria-valuemin="0" aria-valuemax="100" style="width:@tips.TipLikes%">
           <span class="sr-only">Complete</span>
          </div>
        </div>
      <br>
      <p class = "p">@tips.Name</p> 
      <button class="learnmore" onclick=" window.open('@tips.Link','_blank');">
        I want to learn more
      </button>
      <br>		
      }
      <br>
      <div id = "vertically-aligned-block"class="flex float">
      </div>
      }
      </div>
  }

  @if(addRecipe)
  {
    <h1>ADD RECIPE</h1>
    <p>Number Of Ingredients: @numberOfIngredients</p>

    @if (products == null)
    {
    <p><em>Loading products...</em></p>
    }
    else
    {
    <div class="input">
      <span class="inputSpan">
        <b>Name:</b>
        <input class="inputField" type = "text" size="10" @bind="@dishName" @oninput="(e) => { dishName = e.Value ==null? string.Empty:(string)e.Value;}"/>
        <br><br>
        <b>Type:</b>
        <select class="inputField" @bind="@dishType" @oninput="(e) => { dishType = e.Value ==null? string.Empty:(string)e.Value;}">
                        <option value="All">None</option>
                        <option value="Baked">Baked</option>
                        <option value="Pasta">Pasta</option>
                        <option value="Soup">Soup</option>
                        <option value="Salad">Salad</option>
        </select>
        <br><br>
        <b>Ingredients:</b>
        <br>
        @foreach (var ingredient in ingredients)
        {
            <b> @ingredient.Item @ingredient.Amount@ingredient.Unit</b><br>
        }
            <br><b>NEW INGREDIENT:</b>
            <select class="inputField" @bind="@prodID" @oninput="(e) => { prodID = e.Value ==null? string.Empty:(string)e.Value; }">
                @foreach (var product in products)
                {
                    <option value="@product.Id">@product.Name (@product.MeasurementUnits)</option>
                }
            </select>
            <b>Amount:</b>
            <input class="inputField" type = "number" @oninput="(e) => { ingredientAmount = e.Value ==null? string.Empty:(string)e.Value;}" size="1">
            <button class="btn btn-primary" @onclick="AddIngredient">+</button>
            <br>
      </span>
    </div>
    <button class="btn btn-success" @onclick="AddNewRecipe">Add recipe</button>
    }
  }

  @if(initializeUsers)
  {
    i = 0;
    <br/>
    <h1>Registered users:</h1>
      <table class="table table-striped">
        <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Last name</th>
            <th scope="col">Email</th>
            <th scope="col"> </th>
          </tr>
        </thead>

        <tbody>
          @foreach(User user in users )
          { 
            @if(context.User.Identity.Name != user.Email)
            {
              ++i;
              <tr>
                <th scope="row">@i</th>
                <td>@user.FirstName</td>
                <td>@user.Lastname</td>
                <td>@user.Email</td>
                <td><button class="btn btn-danger" @onclick="() => {UserRemovePressed(user.Id);}">-</button></td>
              </tr>
            }
          }
        </tbody>
      </table>
  }
  @if(initializeRoles)
  {
    i = 0;
    <br/>
    <h1>Manage roles:</h1>
      <table class="table table-striped">
        <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Last name</th>
            <th scope="col">Email</th>
            <th scope="col">Admin enabled</th>
          </tr>
        </thead>

        <tbody>
          @foreach(User user in users )
          { 
            @if(context.User.Identity.Name != user.Email)
            {
              ++i;
              <tr>
                <th scope="row">@i</th>
                <td>@user.FirstName</td>
                <td>@user.Lastname</td>
                <td>@user.Email</td>
                @if(user.Role == "admin")
                {
                  <label class="switch">
                    <input type="checkbox" Checked = "true" 
                      @onchange = "() => AdminService.ChangeRole(user)"
                    >
                    <span class="slider round"></span>
                  </label>
                }
                else
                {
                  <label class="switch">
                    <input type="checkbox" 
                    @onchange = "() => AdminService.ChangeRole(user)"
                    >
                    <span class="slider round"></span>
                  </label>
                }
              </tr>
            }
          }
        </tbody>
    </table>

  }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>
@code
{
  List<User> users = new List<User>();
  List<Tip> allTips = new();
  int i;
  public int number = 1;
  int tipNr;
  Boolean initializeRoles = false;
  Boolean initializeUsers = false;
  Boolean acceptPressed = false;
  Boolean addRecipe = false;
  public Tip newTip = new Tip();
  public async Task RoleChangePressed ()
  {
    acceptPressed = false;
    initializeUsers = false;
    initializeRoles = true;
    users = await AdminService.GetUserList();@*adminService.Value.GetUserList().Result;*@
  }

  public async Task LoadRemovableList()
  {
    acceptPressed = false;
    initializeRoles = false;
    initializeUsers = true;
    users = await AdminService.GetUserList();
  }

  public void deleteTip(int Id)
    {
        TipsService.DeleteTip(Id);
        allTips.RemoveAll(item => item.TipId == Id);
    }
  
  protected override async Task OnInitializedAsync()
  {
		allTips = await TipsService.GetTips();
    products = await ProductService.GetProducts();
    recipes = await RecipeCalcService.GetRecipes();
  }

  public void AcceptTipsPressed()
  {
    acceptPressed = true;
    initializeRoles = false;
    initializeUsers = false;
  }

  public void AddRecipePressed()
  {
    acceptPressed = false;
    initializeRoles = false;
    initializeUsers = false;
    addRecipe = true;
  }

  public async Task AcceptPressed(int nr)
  {
		number= nr;
		TipsService.Approve(allTips,newTip, nr);
    newTip.TipId = await TipsService.AddTip(newTip);
    TipsService.DeleteTip(nr);
    allTips.RemoveAll(item => item.TipId == nr);
    allTips.Add(newTip);
    newTip = new Tip();
  }

  public void UserRemovePressed(int id)
  {
    AdminService.removeUser(id);
    users.RemoveAll(user => user.Id == id);
  }  
//----------------- recipe
public int numberOfIngredients = 0;
    private List<Product> products { get; set; }
    private List<DishModel> recipes { get; set; }

    List<RecipeItemModel> ingredients = new List<RecipeItemModel>();
    
    int selectedProductID = 0;
    string prodID = "";
    string dishName = "";
    string ingredientAmount = "";
    string dishType = "";

    public async Task AddIngredient()
    {
        selectedProductID = Int32.Parse(prodID);
        ingredients = await AddRecipeService.AddIngredient(ingredients, selectedProductID, ingredientAmount);
        numberOfIngredients++;
    }

    public async Task AddNewRecipe()
    {
        DishModel recipe = new DishModel();
        recipe = await AddRecipeService.CreateRecipe(ingredients, dishName, dishType, numberOfIngredients);
        await RecipeCalcService.AddRecipe(recipe);
        dishName = "";
        ingredientAmount = "";
        dishType = "";
        ingredients.Clear();
        numberOfIngredients = 0;
    }
}