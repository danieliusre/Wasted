@page "/admin"
@using Wasted.Data
@using System.Collections.Generic
@inject RegistrationService RegistrationService
@inject TipsService TipsService
<style>
    @@import "css/Utils.css"
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<AuthorizeView>
    <Authorized>
      <div class="inline"></div>
      
         <div>
            <button class="buttonSub2"  @onclick="RoleChangePressed">Change roles </button>
            <button class="buttonSub2"  @onclick="LoadRemovableList">Remove users </button>
            <button class="buttonSub2"  @onclick="AcceptTipsPressed">Accept tips </button>
        </div>

  @if(acceptPressed)
  {
    @foreach(var tips in allTips)
    {
      tipNr = tips.TipId;
      <h2 class = "h2"><br>@tips.TipName
        <i  class="fa fa-thumbs-up">
          @tips.TipLikes
        </i>
        <i  class="fa fa-thumbs-down">
           @tips.TipDislikes
        </i>
        <button class="btn btn-danger" @onclick="() => deleteTip(tips.TipId)"> REMOVE </button>
        @if (!tips.AdminApproved)
        {
        <button class="btn btn-success" @onclick="() => AcceptPressed(tips.TipId)" > APPROVE </button>
        }
      </h2>
      <br> 
        <div class="progress">
          <div class="progress-bar" role="progressbar" aria-valuenow="70"
             aria-valuemin="0" aria-valuemax="100" style="width:@tips.TipLikes%">
           <span class="sr-only">Complete</span>
          </div>
        </div>
      <br>
      <p class = "p">@tips.Name</p> 
      <button class="learnmore" onclick=" window.open('@tips.Link','_blank');">
        I want to learn more
      </button>
      <br>		
    }
    <br>
		<div id = "vertically-aligned-block"class="flex float">
    </div>
  }

  @if(initializeUsers)
  {
    i = 0;
    <br/>
    <h1>Registered users:</h1>
      <table class="table table-striped">
        <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Last name</th>
            <th scope="col">Email</th>
            <th scope="col"> </th>
          </tr>
        </thead>

        <tbody>
          @foreach(User user in users )
          { 
            @if(context.User.Identity.Name != user.Email)
            {
              ++i;
              <tr>
                <th scope="row">@i</th>
                <td>@user.Name</td>
                <td>@user.Lastname</td>
                <td>@user.Email</td>
                <td><button class="btn btn-danger" @onclick="() => {users.Remove(user); UserRemovePressed();}">-</button></td>
              </tr>
            }
          }
        </tbody>
      </table>
  }
  @if(initializeRoles)
  {
    i = 0;
    <br/>
    <h1>Manage roles:</h1>
      <table class="table table-striped">
        <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col">Name</th>
            <th scope="col">Last name</th>
            <th scope="col">Email</th>
            <th scope="col">Admin enabled</th>
          </tr>
        </thead>

        <tbody>
          @foreach(User user in users )
          { 
            @if(context.User.Identity.Name != user.Email)
            {
              ++i;
              <tr>
                <th scope="row">@i</th>
                <td>@user.Name</td>
                <td>@user.Lastname</td>
                <td>@user.Email</td>
                @if(user.Role == "admin")
                {
                  <label class="switch">
                    <input type="checkbox" Checked = "true" 
                      @onchange = "() => {users = adminService.Value.ChangeRole(user.Email, user.Role, users);}"
                    >
                    <span class="slider round"></span>
                  </label>
                }
                else
                {
                  <label class="switch">
                    <input type="checkbox" 
                    @onchange = "() => {users = adminService.Value.ChangeRole(user.Email, user.Role, users);}"
                    >
                    <span class="slider round"></span>
                  </label>
                }
              </tr>
            }
          }
        </tbody>
    </table>

  }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>
@code
{
  List<User> users = new List<User>();
  List<Tip> allTips = new();
  Lazy<AdminService> adminService = new Lazy<AdminService>();
  int i;
  public int number = 1;
  int tipNr;
  Boolean initializeRoles = false;
  Boolean initializeUsers = false;
  Boolean acceptPressed = false;
  public void RoleChangePressed ()
  {
    acceptPressed = false;
    initializeUsers = false;
    initializeRoles = true;
    users = adminService.Value.GetUserList();
  }

  public void LoadRemovableList()
  {
    acceptPressed = false;
    initializeRoles = false;
    initializeUsers = true;
    users = adminService.Value.GetUserList();
  }

  public void deleteTip(int Id)
    {
        TipsService.DeleteTip(Id);
        allTips.RemoveAll(item => item.TipId == Id);
    }
  
  protected override async Task OnInitializedAsync()
  {
		allTips = await TipsService.GetTips();
  }

  public void AcceptTipsPressed()
  {
    acceptPressed = true;
    initializeRoles = false;
    initializeUsers = false;
  }

  public void AcceptPressed(int nr)
  {
		number= nr;
		TipsService.Approve(allTips, nr);
  }

  public void UserRemovePressed()
  {
    adminService.Value.writeToFile("UserData.json", users);
  }   
}