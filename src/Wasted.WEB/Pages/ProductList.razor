@page "/productList"

@using Wasted.Data
@inject ProductService ProductService
@inject ExportService exportService
@inject Microsoft.JSInterop.IJSRuntime JS
@using Microsoft.AspNetCore.Components.Authorization
@using Wasted.WEB.Wrapped
@inject AuthenticationStateProvider AuthenticationStateProvider
@using  System.IO
@inject Admins Admins

<AuthorizeView>
    <Authorized>
    <h1>PRODUCT LIST</h1>

    <p>You can search for your favourite products here</p>

    @if (products == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="form-group">
            <input class="form-control" type="text" placeholder="Filter..."
                @bind="Filter"
                @bind:event="oninput">
        </div>
        <table class="table table-striped">
            <thead class="thead-light">
                <tr>
                    <th scope="col">Product name</th>
                    <th scope="col">Type</th>
                    <th scope="col">Measurement units</th>
                    <th scope="col">Energy value (kcal/g)</th>
                    <th scope="col">Add to shopping list</th>
                    @if(Admins.IsAdmin(context.User.Claims))
                    {
                        <th scope="col">Delete from database</th>
                    }
                   
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var product in products)
                    {
                        if (!IsVisible(product))
                            continue;
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Type</td>
                            <td>@product.MeasurementUnits</td>
                            <td>@((int)product.EnergyValue)</td>
                            <td>
                                <button class="btn btn-success" @onclick="() => addToShoppingList(product)">+</button>
                            </td>
                            @if(Admins.IsAdmin(context.User.Claims))
                            {
                                <td>
                                    <button class="btn btn-danger" @onclick="() => deleteProduct(product.Id)">Delete</button>
                                </td>
                            }
                        </tr>
                    }
                }
                
            </tbody>
        </table>
        <div class="container">
            <ul class="pagination pagination-sm no-margin justify-content-center">
                @for(int i = 1; i <= response.TotalPages; i++)
                {
                    var temp = i;
                    @if(temp == response.PageNumber)
                    {
                        <li><a class="btn" style="background-color:#530e64; color:white; text-decoration:underline" 
                                @onclick="() => changeProducts(temp)">@(temp)</a>
                        </li>
                    }
                    else
                    {
                        <li><a class="btn" style="background-color:#530e64a6; color:white"
                                @onclick="() => changeProducts(temp)">@(temp)</a>
                        </li>
                    }
                }
            </ul>
        </div>
        @if(shoppingList.Any())
        {
            <h1>Shopping list:</h1>
            <table class="table table-striped">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Product name</th>
                    </tr>
                </thead>
                <tbody>
                    @{

                        foreach (var product in shoppingList.OrderBy(x => x.Name))
                        {
                            <tr>
                                <td>@product.Name</td>
                            </tr>
                        }
                    }
                    
                </tbody>
            </table>
            <button class="btn btn-primary mg-50" @onclick="ExportToPdf">Export to PDF</button>
        }
        @if(Admins.IsAdmin(context.User.Claims))
        {
            <h3>Add products</h3>
            <div class="row g-3 mg-50">
                <div class="col">
                    <input type="text" class="form-control" placeholder="Name" aria-label="Name" @bind="@newProduct.Name">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Type" aria-label="Type"  @bind="@newProduct.Type">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Measurement units" aria-label="Measurement units"  @bind="@newProduct.MeasurementUnits">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Energy value" aria-label="Energy value"  @bind="@newProduct.EnergyValue">
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-success" @onclick="async () => await addProduct()">Add</button>
                </div>
            </div>
        }

    }
    </Authorized>
</AuthorizeView>
@code {
    public async Task changeProducts(int i)
    {
        products.Clear();
        string link = "product?pageNumber=" + i +"&pageSize=" + response.PageSize;
        products = await ProductService.GetProducts(link);
        response = await ProductService.GetResponse(link);
    }
    
    public static PagedResponse<List<Product>> response {get; set;}

    private List<Product> products { get; set; }

    public Product newProduct = new Product();

    private List<Product> shoppingList = new List<Product>();
     
    public string Filter { get; set; }

    public async Task addProduct()
    {
        newProduct.Id = await ProductService.AddProduct(newProduct);
        products.Add(newProduct);
        newProduct = new Product();
    }

    public void deleteProduct(int Id)
    {
        ProductService.DeleteProduct(Id);
        products.RemoveAll(item => item.Id == Id);
    }
    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
        response = await ProductService.GetResponse();
    }
    public delegate bool CheckValidity (Product product);
    public bool IsVisible(Product product)
    {
        // Example of logger usage in .razor files:
        // Log.Information("Checking visibility for product {0}", product.Name); 
        CheckValidity textCheck = delegate(Product product) {
            return  string.IsNullOrEmpty(Filter) ||
                    product.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase) ||
                    product.Type.Contains(Filter, StringComparison.OrdinalIgnoreCase);
        };
        CheckValidity shoppingListCheck = delegate(Product product) {
            return !shoppingList.Exists(x => x.Name == product.Name);
        };

        return  textCheck(product) && shoppingListCheck(product);

            
    }
    public void addToShoppingList(Product product)
    {
        Log.Information("Adding {0} to shopping list", product);
        shoppingList.Add(product);
    }
    protected async Task ExportToPdf()
    {
        try
        {
            var header="Here is your shopping list";
            var text="We do not recommend to print this pdf. Save paper, use digital version instead";
            using (MemoryStream excelStream = exportService.CreatePdfTable(shoppingList,header,text))
            {
                await JS.SaveAs("ShoppingList.pdf", excelStream.ToArray());
            }
        }
        catch (Exception e)
        {
            Log.Error("Exception caught: {0}",e);
        }
       
    }
}
