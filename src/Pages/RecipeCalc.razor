@page "/recipecalc"
@using System.IO
@using Wasted.Data
@inject RecipeCalcService RecipeCalcService 

<h1>RECIPE CALCULATOR</h1>

<p style="font-size:20px;">Reduce food waste by using leftover products!</p>

<p style="font-size:20px;">Using this page you will be able to enter (or upload) the produce, and we will provide you with endless recipes, where you can use them!</p>
<hr><hr>

<button class="btn btn-primary" @onclick="SaveList">Save list</button>

<button class="btn btn-primary" @onclick="LoadList">Load list</button>

<button class="btn btn-primary" @onclick="FindRecipe">Find a recipe!</button>

<hr>

@code {
    string itemTextField = "";
    string leftTextField = "";
    string unitTextField = "";
    string dateTextField = "";
    List<ItemModel> products = new();
    List<String> expiringProducts = new();
    List<DishModel> dishes = new List<DishModel>();
    private void AddProduct()
    {
        bool allFilled = (!string.IsNullOrEmpty(itemTextField)&&!string.IsNullOrEmpty(leftTextField)&&!string.IsNullOrEmpty(unitTextField)&&!string.IsNullOrEmpty(dateTextField));
        
        foreach (var product in products)         //in case of same items being entered twice
        {
            if(itemTextField.ToLower().Trim() == product.Item.ToLower() && allFilled)
            {
                switch (unitTextField)
                {
                    case "kg":
                        product.Amount += Int32.Parse(leftTextField) * 1000;
                        break;
                    case "l":
                        product.Amount += Int32.Parse(leftTextField) * 1000;
                        break;
                    case "oz":
                        product.Amount += Int32.Parse(leftTextField) * 28;
                        break;
                    default:
                        product.Amount += Int32.Parse(leftTextField);
                        break;
                }
                allFilled = false;
                itemTextField = "";
                leftTextField = "";
                unitTextField = "";
                dateTextField = "";
            }
        }
        if(allFilled)
        {
            products.Add(new ItemModel(){Item = itemTextField.Trim(), Amount = Int32.Parse(leftTextField), Unit = unitTextField, Date = dateTextField});
            itemTextField = "";
            leftTextField = "";
            unitTextField = "";
            dateTextField = "";
        }
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
    }

    private void SaveList()
    {
        RecipeCalcService.SaveProducts(products);
    } 

    private void LoadList()
    {
        products = RecipeCalcService.GetProducts();
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
    }

    private void FindRecipe()
    {
        dishes = RecipeCalcService.FindRecipe(products);
    }
}
<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Amount</th>
            <th>Measurement</th>
            <th>Best until</th>
            <th>Add/Remove</th>
        </tr>
    </thead>

@foreach (var product in products)
{
    <tr>
        <td>@product.Item</td>
        <td>@product.Amount</td>
        <td>@product.Unit</td> 
        <td>@product.Date</td> 
        <td>
        <button class="btn btn-danger" @onclick="() => products.Remove(product)">-</button>
        </td>
    </tr>
}
</table>

<div class="input">
    <span class="inputSpan">
        <input class="inputField" type = "text" size="10" id="itemfieldid" @bind="@itemTextField" @oninput="(e) => { itemTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        <input class="inputField" type = "number" id="leftfieldid" @bind="@leftTextField" @oninput="(e) => { leftTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        <select class="inputField" @bind="@unitTextField" @oninput="(e) => { unitTextField = e.Value ==null? string.Empty:(string)e.Value;}" name="unit" id="unit">
                        <option value="g">g</option>
                        <option value="kg">kg</option>
                        <option value="l">l</option>
                        <option value="ml">ml</option>
                        <option value="oz">oz</option>
                        <option value="unit(s)"></option>
                        </select>
        <input class="inputField" @oninput="(e) => { dateTextField = e.Value ==null? string.Empty:(string)e.Value;}" type="date" id="bestuntilday" name="bestuntilday" size="1">
        <button class="btn btn-primary" @onclick="AddProduct">+</button>
    </span>
</div>

@if(dishes.Any())
{
    <h1><font color=#3a0647><br>Here's what you can make:</font></h1>
    <dl class="Recipes" >
    @foreach (var dish in dishes) 
    {
        <dt style="color:#3a0647;font-size:30px;">@dish.Name</dt>
        <dd1>You will need:</dd1>
        <ul>
            @foreach (var Ingredient in dish.Ingredients)
            {
                <li style="color:#3a0647;font-size:20px;">@Ingredient.Item @Ingredient.Amount @Ingredient.Unit</li>
            }
        </ul>
    }
    </dl>  
}

@if(expiringProducts.Any())
{
    <h1><font style="color:red;font-size:25px;"><br>Be careful! These products have 3 or less days left, before they expire:</font></h1>
    <ul class="Expired" >
        @foreach (string expiredProduct in expiringProducts)
        {
            <li style="color:red;font-size:25px;">@expiredProduct</li>
        }
    </ul>
}