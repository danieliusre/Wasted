@page "/registration"
@using System.IO
@using System.Text.RegularExpressions;
@using System.Net.Mail

<h1 class="tac">Registration</h1>

<style>
    @@import "css/Utils.css"
</style>

<iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
<form method="post" action="submitscrip.php" target="dummyframe">
<div > 
    <input class="form-control tac regField" type="text"  placeholder="Name" @bind="@NameBox"/>
    <input class="form-control tac regField" type="text"   placeholder="Last name" @bind="@LastNameBox"/>
    <input class="form-control tac regField" type="email"  placeholder="Email"  @bind="@EmailBox"/>
    <input class="form-control tac regField" type="password" placeholder="Password" @bind="@PasswordBox"/>
</div>
<div>
    <input class="buttonSub" type="submit" @onclick="AddUserData"> Submit</input>
</div>
</form>
<ul class="registrationMessage tac">
    @foreach (string ErrorMesage in ErrorMesages)
    {
        <li>@ErrorMesage</li>
    }
</ul>

@code
{  
    private List<string> ErrorMesages = new List<string>();
    static string NameBox = "";
    static string LastNameBox ;
    static string EmailBox ; 
    static string PasswordBox ;
    static List<User> users = new List<User>();
        
    public void AddUserData()
    {
        CreateUserList();
        if( !(string.IsNullOrEmpty(NameBox) || string.IsNullOrEmpty(LastNameBox) || string.IsNullOrEmpty(EmailBox) || string.IsNullOrEmpty(PasswordBox)))
        {
            if(newEmail(EmailBox) && emailValid(EmailBox))
            {
                users.Add(new User(){
                    Name = NameBox,
                    Lastname = LastNameBox,
                    Email = EmailBox,
                    Password = PasswordBox
                });
                File.AppendAllText(@"UserData.txt", NameBox + "," + LastNameBox + "," + EmailBox + "," + PasswordBox + Environment.NewLine);
                users.Clear();
                CreateUserList(); 
                ErrorMesages.Clear();
                ErrorMesages.Add("Success! Welcome to the Wasted family!");
            }
            else
            {
                ErrorMesages.Clear();
                ErrorMesages.Add("Mistake in email field!");
            }
         }
         else
         {
            ErrorMesages.Clear();   
         }
    }

    public bool newEmail(string email)
    {
        bool newEmail = true;
        foreach(User regUser in users)
        {
            if(String.Equals(email, regUser.Email))
            {
                newEmail = false;
            }
        }
        return newEmail;
    }
    public bool emailValid(String email)
    {
        try
    {
        MailAddress m = new MailAddress(email);

        return true;
    }
    catch (FormatException)
    {
        return false;
    }
    }

    public void CreateUserList()
    {
        string[] lines = System.IO.File.ReadAllLines(@"UserData.txt");   
        foreach(string line in lines) 
        {

            string[] userData = line.Split(',');
            users.Add(new User()
            {   Name = userData[0],
                Lastname = userData[1],
                Email = userData[2],
                Password = userData[3]
            });
        } 
    }
    //Function prepared for further work with password validation
            public bool validPasswordProvided(string password)
        {
            var hasNumber = new Regex(@"[0-9]+");
            var hasUpperChar = new Regex(@"[A-Z]+");
            var hasMiniMaxChars = new Regex(@".{8,15}");
            var hasLowerChar = new Regex(@"[a-z]+");
            var hasSymbols = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
            
            if(   !hasLowerChar.IsMatch(password)
                ||!hasUpperChar.IsMatch(password)
                ||!hasMiniMaxChars.IsMatch(password)
                ||!hasLowerChar.IsMatch(password)
                ||!hasSymbols.IsMatch(password)
                )
                {
                    return false;
                }
            return true;
        }
   
}
